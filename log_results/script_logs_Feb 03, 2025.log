INFO - classes.py - 49 - Opening file /Users/aryanvafadar/Documents/GitHub/machine_learning_models/files/input_files/house_prices_data.csv to create into a pandas dataframe.
INFO - classes.py - 55 - Initial DataFrame successfully created and set to self.initial_frame
INFO - classes.py - 56 - Shape of Initial Frame: (21613, 21)
INFO - classes.py - 57 - Initial Frame Columns: Index(['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living',
       'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade',
       'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode',
       'lat', 'long', 'sqft_living15', 'sqft_lot15'],
      dtype='object')
INFO - classes.py - 58 - Initial Frame DataTypes: {'id': dtype('int64'), 'date': dtype('O'), 'price': dtype('float64'), 'bedrooms': dtype('int64'), 'bathrooms': dtype('float64'), 'sqft_living': dtype('int64'), 'sqft_lot': dtype('int64'), 'floors': dtype('float64'), 'waterfront': dtype('int64'), 'view': dtype('int64'), 'condition': dtype('int64'), 'grade': dtype('int64'), 'sqft_above': dtype('int64'), 'sqft_basement': dtype('int64'), 'yr_built': dtype('int64'), 'yr_renovated': dtype('int64'), 'zipcode': dtype('int64'), 'lat': dtype('float64'), 'long': dtype('float64'), 'sqft_living15': dtype('int64'), 'sqft_lot15': dtype('int64')}
INFO - classes.py - 59 - Intial Frame Contains Null Values?: id               False
date             False
price            False
bedrooms         False
bathrooms        False
sqft_living      False
sqft_lot         False
floors           False
waterfront       False
view             False
condition        False
grade            False
sqft_above       False
sqft_basement    False
yr_built         False
yr_renovated     False
zipcode          False
lat              False
long             False
sqft_living15    False
sqft_lot15       False
dtype: bool
INFO - classes.py - 60 - Total Number of Null Values in Each Column: id               0
date             0
price            0
bedrooms         0
bathrooms        0
sqft_living      0
sqft_lot         0
floors           0
waterfront       0
view             0
condition        0
grade            0
sqft_above       0
sqft_basement    0
yr_built         0
yr_renovated     0
zipcode          0
lat              0
long             0
sqft_living15    0
sqft_lot15       0
dtype: int64
INFO - classes.py - 84 - remove_columns function called. List of columns to remove: ['id', 'date', 'yr_renovated', 'zipcode', 'lat', 'long']
INFO - classes.py - 88 - Current columns in the dataframe: ['id', 'date', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'yr_renovated', 'zipcode', 'lat', 'long', 'sqft_living15', 'sqft_lot15']
INFO - classes.py - 92 - Requested to remove columns have been set to lowercase.
INFO - classes.py - 101 - All columns exist within the DataFrame, and will be removed.
INFO - classes.py - 108 - Columns ['id', 'date', 'yr_renovated', 'zipcode', 'lat', 'long'] have been removed from the dataframe.
INFO - classes.py - 109 - Columns that remain in the frame: ['price', 'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'sqft_living15', 'sqft_lot15'].
INFO - classes.py - 135 - Label price exists in the dataframe. Attempting to remove...
INFO - classes.py - 139 - Label column has been removed from the dataframe, and will be reinserted at the end.
INFO - classes.py - 140 - Label Column: 0        221900.0
1        538000.0
2        180000.0
3        604000.0
4        510000.0
           ...   
21608    360000.0
21609    400000.0
21610    402101.0
21611    400000.0
21612    325000.0
Name: price, Length: 21613, dtype: float64
INFO - classes.py - 144 - Label column added back to the dataframe.
INFO - classes.py - 145 - Sample of new self.initial_frame:        bedrooms  bathrooms  sqft_living  sqft_lot  floors  waterfront  view  condition  grade  sqft_above  sqft_basement  yr_built  sqft_living15  sqft_lot15      price
2449          3       2.50         3160     12824     1.0           0     2          4      9        1820           1340      1966           3390       11985  1600000.0
1326          3       3.50         1810      1846     2.0           0     0          4      8        1440            370      2009           1480        3600   625000.0
3922          2       2.00         1370      4866     1.0           0     0          3      8        1370              0      2005           1365        4784   431500.0
10971         3       2.50         1830     65340     1.0           0     0          3      8        1520            310      1991           2100       84942   427000.0
10849         3       1.75         1320      6600     1.0           0     0          3      7        1320              0      1988           1070        6594   292000.0
13142         4       2.75         1500      7036     1.0           0     0          3      7        1060            440      1979           1620        7200   262500.0
3971          3       1.75         1470      6250     1.0           0     3          4      7        1070            400      1939           2630        7050   432000.0
1062          4       2.75         2840     11900     1.0           0     3          4      9        1640           1200      1961           2790       10070   790000.0
4774          4       2.50         2120      6754     2.0           0     0          3      7        2120              0      1998           2120        6937   275000.0
18431         3       2.50         2550      6677     2.0           0     0          3      8        2550              0      2002           1930        7217   595000.0
INFO - classes.py - 161 - Frame cleaning function called. Making a copy of self.initial_frame before beginning cleaning.
INFO - classes.py - 166 - Whitespaces from column headers have been removed.
INFO - classes.py - 170 - Whitespaces removed from rows/samples in the dataset.
INFO - classes.py - 174 - Special characters, symbols and commas removed from the frame.
INFO - classes.py - 176 - Self.initial_frame has been cleaned. New cleaned frame has been set to self.cleaned_frame
INFO - classes.py - 196 - Frame encoding function has been called. All string data will be converted to numeric (int).
INFO - classes.py - 201 - Self.cleaned_frame has been copied.
INFO - classes.py - 205 - SkLearn OneHotEncoder has been instantiated.
INFO - classes.py - 208 - Iterating through the dataframe to search for columns whose data is of type object.
INFO - classes.py - 247 - Dataframe has finished being encoded. Label/Target column will now be removed and re-added to the end of the frame.
INFO - classes.py - 250 - Label column price has been removed and readded to the end of the dataframe.
INFO - classes.py - 338 - Get features and labels function has been called.
INFO - classes.py - 347 - Columns in DataFrame: ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'sqft_living15', 'sqft_lot15', 'price']
INFO - classes.py - 355 - List of Features: ['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors', 'waterfront', 'view', 'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built', 'sqft_living15', 'sqft_lot15']. These columns will be used to create our X variable.
INFO - classes.py - 356 - List of Labels: price. This will be used for our y variable.
INFO - classes.py - 360 - X DataFrame created, and will be used for train_test_split. X Frame Shape: (21613, 14)
INFO - classes.py - 361 - y DataFrame created, and will be used for train_test_split. y Frame Shape: (21613,)
INFO - classes.py - 366 - X and y variables have been split into training and testing data. This first split should not be used to train and tune the machine learing model. It should only be used for training and testing after the model has been trained and tuned.
INFO - classes.py - 367 - First Split Test Size: 0.3
INFO - classes.py - 368 - Size X_train_full: (15129, 14) | Size X_test: (6484, 14)
INFO - classes.py - 369 - Size of y_train_full: (15129,) | Size y_test: (6484,)
INFO - classes.py - 373 - X_train_full and y_train_full have been split again to create training and testing data to train and tune our model. These new variables (X_train, X_val, y_train, y_val) should only be used to find which model works best on our dataset, and then subsequently tuning this model.
INFO - classes.py - 374 - Size X_train: (12103, 14) | Size X_val: (3026, 14)
INFO - classes.py - 375 - Size of y_train: (12103,) | Size y_val: (6484,)
INFO - classes.py - 377 - Testing and Training data have successfully been created. Ready now to get the best model.
INFO - classes.py - 396 - get_best_models function has been called.
INFO - classes.py - 420 - List of models to test: {'linear_regression': LinearRegression(), 'ridge_regression': Ridge(), 'lasso_regression': Lasso(), 'linear_support_vector': LinearSVR(), 'gaussian_regressor': GaussianProcessRegressor(), 'gradient_boosting': GradientBoostingRegressor(), 'hist_boosting': HistGradientBoostingRegressor(), 'random_forest': RandomForestRegressor()}
INFO - classes.py - 427 - Testing each model in the all_models dict now.
INFO - classes.py - 429 - User passed in 5 number of iterations. We will run the model testing this amount of times.
INFO - classes.py - 432 - Model Run: 1
INFO - classes.py - 439 - Testing Model: LinearRegression()
INFO - classes.py - 443 - Training Model: LinearRegression()
INFO - classes.py - 468 - Model LinearRegression() is the best model so far for our dataset.
INFO - classes.py - 439 - Testing Model: Ridge()
INFO - classes.py - 443 - Training Model: Ridge()
INFO - classes.py - 439 - Testing Model: Lasso()
INFO - classes.py - 443 - Training Model: Lasso()
INFO - classes.py - 439 - Testing Model: LinearSVR()
INFO - classes.py - 443 - Training Model: LinearSVR()
INFO - classes.py - 439 - Testing Model: GaussianProcessRegressor()
INFO - classes.py - 443 - Training Model: GaussianProcessRegressor()
INFO - classes.py - 439 - Testing Model: GradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: GradientBoostingRegressor()
INFO - classes.py - 468 - Model GradientBoostingRegressor() is the best model so far for our dataset.
INFO - classes.py - 439 - Testing Model: HistGradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: HistGradientBoostingRegressor()
INFO - classes.py - 468 - Model HistGradientBoostingRegressor() is the best model so far for our dataset.
INFO - classes.py - 439 - Testing Model: RandomForestRegressor()
INFO - classes.py - 443 - Training Model: RandomForestRegressor()
INFO - classes.py - 432 - Model Run: 2
INFO - classes.py - 439 - Testing Model: LinearRegression()
INFO - classes.py - 443 - Training Model: LinearRegression()
INFO - classes.py - 439 - Testing Model: Ridge()
INFO - classes.py - 443 - Training Model: Ridge()
INFO - classes.py - 439 - Testing Model: Lasso()
INFO - classes.py - 443 - Training Model: Lasso()
INFO - classes.py - 439 - Testing Model: LinearSVR()
INFO - classes.py - 443 - Training Model: LinearSVR()
INFO - classes.py - 439 - Testing Model: GaussianProcessRegressor()
INFO - classes.py - 443 - Training Model: GaussianProcessRegressor()
INFO - classes.py - 439 - Testing Model: GradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: GradientBoostingRegressor()
INFO - classes.py - 439 - Testing Model: HistGradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: HistGradientBoostingRegressor()
INFO - classes.py - 439 - Testing Model: RandomForestRegressor()
INFO - classes.py - 443 - Training Model: RandomForestRegressor()
INFO - classes.py - 432 - Model Run: 3
INFO - classes.py - 439 - Testing Model: LinearRegression()
INFO - classes.py - 443 - Training Model: LinearRegression()
INFO - classes.py - 439 - Testing Model: Ridge()
INFO - classes.py - 443 - Training Model: Ridge()
INFO - classes.py - 439 - Testing Model: Lasso()
INFO - classes.py - 443 - Training Model: Lasso()
INFO - classes.py - 439 - Testing Model: LinearSVR()
INFO - classes.py - 443 - Training Model: LinearSVR()
INFO - classes.py - 439 - Testing Model: GaussianProcessRegressor()
INFO - classes.py - 443 - Training Model: GaussianProcessRegressor()
INFO - classes.py - 439 - Testing Model: GradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: GradientBoostingRegressor()
INFO - classes.py - 439 - Testing Model: HistGradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: HistGradientBoostingRegressor()
INFO - classes.py - 468 - Model HistGradientBoostingRegressor() is the best model so far for our dataset.
INFO - classes.py - 439 - Testing Model: RandomForestRegressor()
INFO - classes.py - 443 - Training Model: RandomForestRegressor()
INFO - classes.py - 432 - Model Run: 4
INFO - classes.py - 439 - Testing Model: LinearRegression()
INFO - classes.py - 443 - Training Model: LinearRegression()
INFO - classes.py - 439 - Testing Model: Ridge()
INFO - classes.py - 443 - Training Model: Ridge()
INFO - classes.py - 439 - Testing Model: Lasso()
INFO - classes.py - 443 - Training Model: Lasso()
INFO - classes.py - 439 - Testing Model: LinearSVR()
INFO - classes.py - 443 - Training Model: LinearSVR()
INFO - classes.py - 439 - Testing Model: GaussianProcessRegressor()
INFO - classes.py - 443 - Training Model: GaussianProcessRegressor()
INFO - classes.py - 439 - Testing Model: GradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: GradientBoostingRegressor()
INFO - classes.py - 439 - Testing Model: HistGradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: HistGradientBoostingRegressor()
INFO - classes.py - 439 - Testing Model: RandomForestRegressor()
INFO - classes.py - 443 - Training Model: RandomForestRegressor()
INFO - classes.py - 432 - Model Run: 5
INFO - classes.py - 439 - Testing Model: LinearRegression()
INFO - classes.py - 443 - Training Model: LinearRegression()
INFO - classes.py - 439 - Testing Model: Ridge()
INFO - classes.py - 443 - Training Model: Ridge()
INFO - classes.py - 439 - Testing Model: Lasso()
INFO - classes.py - 443 - Training Model: Lasso()
INFO - classes.py - 439 - Testing Model: LinearSVR()
INFO - classes.py - 443 - Training Model: LinearSVR()
INFO - classes.py - 439 - Testing Model: GaussianProcessRegressor()
INFO - classes.py - 443 - Training Model: GaussianProcessRegressor()
INFO - classes.py - 439 - Testing Model: GradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: GradientBoostingRegressor()
INFO - classes.py - 439 - Testing Model: HistGradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: HistGradientBoostingRegressor()
INFO - classes.py - 439 - Testing Model: RandomForestRegressor()
INFO - classes.py - 443 - Training Model: RandomForestRegressor()
INFO - classes.py - 432 - Model Run: 6
INFO - classes.py - 439 - Testing Model: LinearRegression()
INFO - classes.py - 443 - Training Model: LinearRegression()
INFO - classes.py - 439 - Testing Model: Ridge()
INFO - classes.py - 443 - Training Model: Ridge()
INFO - classes.py - 439 - Testing Model: Lasso()
INFO - classes.py - 443 - Training Model: Lasso()
INFO - classes.py - 439 - Testing Model: LinearSVR()
INFO - classes.py - 443 - Training Model: LinearSVR()
INFO - classes.py - 439 - Testing Model: GaussianProcessRegressor()
INFO - classes.py - 443 - Training Model: GaussianProcessRegressor()
INFO - classes.py - 439 - Testing Model: GradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: GradientBoostingRegressor()
INFO - classes.py - 439 - Testing Model: HistGradientBoostingRegressor()
INFO - classes.py - 443 - Training Model: HistGradientBoostingRegressor()
INFO - classes.py - 468 - Model HistGradientBoostingRegressor() is the best model so far for our dataset.
INFO - classes.py - 439 - Testing Model: RandomForestRegressor()
INFO - classes.py - 443 - Training Model: RandomForestRegressor()
INFO - classes.py - 476 - Each model has been tested. Results have been sorted from best -> worst.
INFO - classes.py - 479 - Top Model: hist_boosting | R2 Score: 0.7410230391703627
