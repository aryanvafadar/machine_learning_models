INFO - classes.py - 50 - Opening file /Users/aryanvafadar/Documents/GitHub/machine_learning_models/files/input_files/costco_sales_feb9.csv to create into a pandas dataframe.
INFO - classes.py - 56 - Initial DataFrame successfully created and set to self.initial_frame
INFO - classes.py - 57 - Shape of Initial Frame: (300, 6)
INFO - classes.py - 58 - Initial Frame Columns: Index(['date', 'gold_spot', 'silver_spot', 'total_gold_ozs_sold',
       'total_silver_ozs_sold', 'total_revenue (usd)'],
      dtype='object')
INFO - classes.py - 59 - Initial Frame DataTypes: {'date': dtype('O'), 'gold_spot': dtype('float64'), 'silver_spot': dtype('float64'), 'total_gold_ozs_sold': dtype('float64'), 'total_silver_ozs_sold': dtype('float64'), 'total_revenue (usd)': dtype('float64')}
INFO - classes.py - 60 - Intial Frame Contains Null Values?: date                     True
gold_spot                True
silver_spot              True
total_gold_ozs_sold      True
total_silver_ozs_sold    True
total_revenue (usd)      True
dtype: bool
INFO - classes.py - 61 - Total Number of Null Values in Each Column: date                     1
gold_spot                4
silver_spot              4
total_gold_ozs_sold      2
total_silver_ozs_sold    2
total_revenue (usd)      2
dtype: int64
INFO - classes.py - 175 - Interpolated nulls in column 'gold_spot'.
INFO - classes.py - 175 - Interpolated nulls in column 'silver_spot'.
INFO - classes.py - 180 - Dropped all rows with null values.
INFO - classes.py - 183 - Null Check: date                     0
gold_spot                0
silver_spot              0
total_gold_ozs_sold      0
total_silver_ozs_sold    0
total_revenue (usd)      0
dtype: int64
INFO - classes.py - 187 - Successfully handled null values. Updated DataFrame set to self.initial_frame.
INFO - classes.py - 85 - remove_columns function called. List of columns to remove: ['total_silver_ozs_sold', 'total_revenue (usd)']
INFO - classes.py - 89 - Current columns in the dataframe: ['date', 'gold_spot', 'silver_spot', 'total_gold_ozs_sold', 'total_silver_ozs_sold', 'total_revenue (usd)']
INFO - classes.py - 93 - Requested to remove columns have been set to lowercase.
INFO - classes.py - 102 - All columns exist within the DataFrame, and will be removed.
INFO - classes.py - 109 - Columns ['total_silver_ozs_sold', 'total_revenue (usd)'] have been removed from the dataframe.
INFO - classes.py - 110 - Columns that remain in the frame: ['date', 'gold_spot', 'silver_spot', 'total_gold_ozs_sold'].
INFO - classes.py - 211 - Label total_gold_ozs_sold exists in the dataframe. Attempting to remove...
INFO - classes.py - 215 - Label column has been removed from the dataframe, and will be reinserted at the end.
INFO - classes.py - 216 - Label Column: 0      542.8
1      523.6
2      379.1
3      863.9
4      949.2
       ...  
293    190.0
294      0.0
295      0.0
296      0.0
297      0.0
Name: total_gold_ozs_sold, Length: 298, dtype: float64
INFO - classes.py - 220 - Label column added back to the dataframe.
INFO - classes.py - 221 - Sample of new self.initial_frame:            date  gold_spot  silver_spot  total_gold_ozs_sold
18   2025-01-18   2703.880      30.3710                 15.0
272  2024-03-05   2128.390      23.7051               1000.0
148  2024-08-02   2444.930      28.5799                413.2
231  2024-04-22   2309.890      26.9656                237.8
197  2024-06-04   2339.230      29.7186                 77.3
113  2024-09-17   2569.580      30.4648                191.2
268  2024-03-09   2180.405      24.3139                 21.4
151  2024-07-30   2419.355      28.5820                393.5
62   2024-11-19   2630.170      31.0336                475.1
235  2024-04-18   2382.415      28.2633                364.0
INFO - classes.py - 237 - Frame cleaning function called. Making a copy of self.initial_frame before beginning cleaning.
INFO - classes.py - 241 - Whitespaces from column headers have been removed.
INFO - classes.py - 245 - Whitespaces removed from rows/samples in the dataset.
INFO - classes.py - 249 - Special characters, symbols and commas removed from the frame.
INFO - classes.py - 251 - Self.initial_frame has been cleaned. New cleaned frame has been set to self.cleaned_frame
INFO - classes.py - 475 - Frame successfully reversed.
INFO - classes.py - 481 - Percent change column calculated and added for column gold_spot
INFO - classes.py - 481 - Percent change column calculated and added for column silver_spot
INFO - classes.py - 486 - Frame successfully unreversed.
INFO - classes.py - 497 - Columns ['gold_spot_percent_change', 'silver_spot_percent_change'] have been multipled by 100.
INFO - classes.py - 360 - Date to Datetime function has been called.
INFO - classes.py - 370 - Date column 'date' exists in the DataFrame.
INFO - classes.py - 381 - All datetime columns requested are valid.
INFO - classes.py - 386 - Date column 'date' successfully converted to datetime format.
INFO - classes.py - 399 - Datetime attribute 'weekday' has been added to the DataFrame.
INFO - classes.py - 404 - is_weekend column has been added to the DatFrame
INFO - classes.py - 409 - Original date column has been dropped from the DataFrame.
INFO - classes.py - 413 - Final DataFrame columns after datetime processing: ['gold_spot', 'silver_spot', 'total_gold_ozs_sold', 'gold_spot_percent_change', 'silver_spot_percent_change', 'weekday', 'is_weekend']
INFO - classes.py - 271 - Frame encoding function has been called. All string data will be converted to numeric (int).
INFO - classes.py - 276 - Self.cleaned_frame has been copied.
INFO - classes.py - 280 - SkLearn OneHotEncoder has been instantiated.
INFO - classes.py - 283 - Iterating through the dataframe to search for columns whose data is of type object.
INFO - classes.py - 322 - Dataframe has finished being encoded. Label/Target column will now be removed and re-added to the end of the frame.
INFO - classes.py - 325 - Label column total_gold_ozs_sold has been removed and readded to the end of the dataframe.
INFO - classes.py - 339 -    gold_spot  silver_spot  gold_spot_percent_change  silver_spot_percent_change  weekday  is_weekend  total_gold_ozs_sold
0   2861.765      31.8250                  0.005067                   -1.247095        4           0                542.8
1   2861.620      32.2269                  0.049472                    0.002793        3           0                523.6
2   2860.205      32.2260                  0.010665                   -0.133255        2           0                379.1
3   2859.900      32.2690                  1.608382                    2.438343        1           0                863.9
4   2814.630      31.5009                  0.951544                    1.178454        0           0                949.2
5   2788.100      31.1340                 -0.408283                   -0.638284        6           1                232.0
6   2799.530      31.3340                  0.016791                   -0.200338        5           1                 15.8
7   2799.060      31.3969                  0.196702                   -0.143439        4           0                371.7
8   2793.565      31.4420                  0.979772                    1.681651        3           0                519.3
9   2766.460      30.9220                  0.240414                    1.798812        2           0                461.4
INFO - classes.py - 340 - None
INFO - classes.py - 341 - (298, 7)
INFO - classes.py - 342 - gold_spot                     0
silver_spot                   0
gold_spot_percent_change      1
silver_spot_percent_change    1
weekday                       0
is_weekend                    0
total_gold_ozs_sold           0
dtype: int64
INFO - classes.py - 578 - Get features and labels function has been called.
INFO - classes.py - 587 - Columns in DataFrame: ['gold_spot', 'silver_spot', 'gold_spot_percent_change', 'silver_spot_percent_change', 'weekday', 'is_weekend', 'total_gold_ozs_sold']
INFO - classes.py - 595 - List of Features: ['gold_spot', 'silver_spot', 'gold_spot_percent_change', 'silver_spot_percent_change', 'weekday', 'is_weekend']. These columns will be used to create our X variable.
INFO - classes.py - 596 - List of Labels: total_gold_ozs_sold. This will be used for our y variable.
INFO - classes.py - 600 - X DataFrame created, and will be used for train_test_split. X Frame Shape: (298, 6)
INFO - classes.py - 601 - y DataFrame created, and will be used for train_test_split. y Frame Shape: (298,)
INFO - classes.py - 611 - X and y variables have been split into training and testing data. This first split should not be used to train and tune the machine learing model. It should only be used for training and testing after the model has been trained and tuned.
INFO - classes.py - 612 - First Split Test Size: 0.3
INFO - classes.py - 613 - Size X_train_full: (208, 6) | Size X_test: (90, 6)
INFO - classes.py - 614 - Size of y_train_full: (208,) | Size y_test: (90,)
INFO - classes.py - 618 - X_train_full and y_train_full have been split again to create training and testing data to train and tune our model. These new variables (X_train, X_val, y_train, y_val) should only be used to find which model works best on our dataset, and then subsequently tuning this model.
INFO - classes.py - 619 - Size X_train: (166, 6) | Size X_val: (42, 6)
INFO - classes.py - 620 - Size of y_train: (166,) | Size y_val: (42,)
INFO - classes.py - 622 - Testing and Training data have successfully been created. Ready now to get the best model.
INFO - classes.py - 641 - get_best_models function has been called.
INFO - classes.py - 679 - List of models to test: {'linear_regression': LinearRegression(), 'ridge_regression': Ridge(alpha=0.01, max_iter=10000), 'lasso_regression': Lasso(alpha=0.01, max_iter=10000), 'elastic_net': ElasticNet(alpha=0.01, max_iter=10000), 'huber_regression': HuberRegressor(max_iter=10000), 'linear_support_vector': LinearSVR(max_iter=10000), 'gaussian_regressor': GaussianProcessRegressor(), 'gradient_boosting': GradientBoostingRegressor(), 'hist_boosting': HistGradientBoostingRegressor(), 'random_forest': RandomForestRegressor(), 'extra_trees': ExtraTreesRegressor(), 'decision_tree': DecisionTreeRegressor(), 'k_nearest_neighbors': KNeighborsRegressor(), 'support_vector_regressor': SVR(), 'adaboost': AdaBoostRegressor(n_estimators=100), 'bagging_regressor': BaggingRegressor(n_estimators=100), 'stacking_regressor': StackingRegressor(estimators=[('rf', RandomForestRegressor()),
                              ('gb', GradientBoostingRegressor())]), 'neural_network': MLPRegressor(max_iter=10000)}
INFO - classes.py - 686 - Testing each model in the all_models dict now.
INFO - classes.py - 688 - User passed in 1 number of iterations. We will run the model testing 2 amount of times.
INFO - classes.py - 692 - Model Run: 1
INFO - classes.py - 699 - Testing Model: LinearRegression()
INFO - classes.py - 703 - Training Model: LinearRegression()
INFO - classes.py - 728 - Model LinearRegression() is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: Ridge(alpha=0.01, max_iter=10000)
INFO - classes.py - 703 - Training Model: Ridge(alpha=0.01, max_iter=10000)
INFO - classes.py - 728 - Model Ridge(alpha=0.01, max_iter=10000) is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: Lasso(alpha=0.01, max_iter=10000)
INFO - classes.py - 703 - Training Model: Lasso(alpha=0.01, max_iter=10000)
INFO - classes.py - 728 - Model Lasso(alpha=0.01, max_iter=10000) is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: ElasticNet(alpha=0.01, max_iter=10000)
INFO - classes.py - 703 - Training Model: ElasticNet(alpha=0.01, max_iter=10000)
INFO - classes.py - 728 - Model ElasticNet(alpha=0.01, max_iter=10000) is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: HuberRegressor(max_iter=10000)
INFO - classes.py - 703 - Training Model: HuberRegressor(max_iter=10000)
INFO - classes.py - 699 - Testing Model: LinearSVR(max_iter=10000)
INFO - classes.py - 703 - Training Model: LinearSVR(max_iter=10000)
INFO - classes.py - 699 - Testing Model: GaussianProcessRegressor()
INFO - classes.py - 703 - Training Model: GaussianProcessRegressor()
INFO - classes.py - 699 - Testing Model: GradientBoostingRegressor()
INFO - classes.py - 703 - Training Model: GradientBoostingRegressor()
INFO - classes.py - 728 - Model GradientBoostingRegressor() is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: HistGradientBoostingRegressor()
INFO - classes.py - 703 - Training Model: HistGradientBoostingRegressor()
INFO - classes.py - 728 - Model HistGradientBoostingRegressor() is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: RandomForestRegressor()
INFO - classes.py - 703 - Training Model: RandomForestRegressor()
INFO - classes.py - 728 - Model RandomForestRegressor() is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: ExtraTreesRegressor()
INFO - classes.py - 703 - Training Model: ExtraTreesRegressor()
INFO - classes.py - 728 - Model ExtraTreesRegressor() is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: DecisionTreeRegressor()
INFO - classes.py - 703 - Training Model: DecisionTreeRegressor()
INFO - classes.py - 699 - Testing Model: KNeighborsRegressor()
INFO - classes.py - 703 - Training Model: KNeighborsRegressor()
INFO - classes.py - 699 - Testing Model: SVR()
INFO - classes.py - 703 - Training Model: SVR()
INFO - classes.py - 699 - Testing Model: AdaBoostRegressor(n_estimators=100)
INFO - classes.py - 703 - Training Model: AdaBoostRegressor(n_estimators=100)
INFO - classes.py - 699 - Testing Model: BaggingRegressor(n_estimators=100)
INFO - classes.py - 703 - Training Model: BaggingRegressor(n_estimators=100)
INFO - classes.py - 699 - Testing Model: StackingRegressor(estimators=[('rf', RandomForestRegressor()),
                              ('gb', GradientBoostingRegressor())])
INFO - classes.py - 703 - Training Model: StackingRegressor(estimators=[('rf', RandomForestRegressor()),
                              ('gb', GradientBoostingRegressor())])
INFO - classes.py - 699 - Testing Model: MLPRegressor(max_iter=10000)
INFO - classes.py - 703 - Training Model: MLPRegressor(max_iter=10000)
INFO - classes.py - 692 - Model Run: 2
INFO - classes.py - 699 - Testing Model: LinearRegression()
INFO - classes.py - 703 - Training Model: LinearRegression()
INFO - classes.py - 699 - Testing Model: Ridge(alpha=0.01, max_iter=10000)
INFO - classes.py - 703 - Training Model: Ridge(alpha=0.01, max_iter=10000)
INFO - classes.py - 699 - Testing Model: Lasso(alpha=0.01, max_iter=10000)
INFO - classes.py - 703 - Training Model: Lasso(alpha=0.01, max_iter=10000)
INFO - classes.py - 699 - Testing Model: ElasticNet(alpha=0.01, max_iter=10000)
INFO - classes.py - 703 - Training Model: ElasticNet(alpha=0.01, max_iter=10000)
INFO - classes.py - 699 - Testing Model: HuberRegressor(max_iter=10000)
INFO - classes.py - 703 - Training Model: HuberRegressor(max_iter=10000)
INFO - classes.py - 699 - Testing Model: LinearSVR(max_iter=10000)
INFO - classes.py - 703 - Training Model: LinearSVR(max_iter=10000)
INFO - classes.py - 699 - Testing Model: GaussianProcessRegressor()
INFO - classes.py - 703 - Training Model: GaussianProcessRegressor()
INFO - classes.py - 699 - Testing Model: GradientBoostingRegressor()
INFO - classes.py - 703 - Training Model: GradientBoostingRegressor()
INFO - classes.py - 699 - Testing Model: HistGradientBoostingRegressor()
INFO - classes.py - 703 - Training Model: HistGradientBoostingRegressor()
INFO - classes.py - 699 - Testing Model: RandomForestRegressor()
INFO - classes.py - 703 - Training Model: RandomForestRegressor()
INFO - classes.py - 699 - Testing Model: ExtraTreesRegressor()
INFO - classes.py - 703 - Training Model: ExtraTreesRegressor()
INFO - classes.py - 728 - Model ExtraTreesRegressor() is the best model so far for our dataset.
INFO - classes.py - 699 - Testing Model: DecisionTreeRegressor()
INFO - classes.py - 703 - Training Model: DecisionTreeRegressor()
INFO - classes.py - 699 - Testing Model: KNeighborsRegressor()
INFO - classes.py - 703 - Training Model: KNeighborsRegressor()
INFO - classes.py - 699 - Testing Model: SVR()
INFO - classes.py - 703 - Training Model: SVR()
INFO - classes.py - 699 - Testing Model: AdaBoostRegressor(n_estimators=100)
INFO - classes.py - 703 - Training Model: AdaBoostRegressor(n_estimators=100)
INFO - classes.py - 699 - Testing Model: BaggingRegressor(n_estimators=100)
INFO - classes.py - 703 - Training Model: BaggingRegressor(n_estimators=100)
INFO - classes.py - 699 - Testing Model: StackingRegressor(estimators=[('rf', RandomForestRegressor()),
                              ('gb', GradientBoostingRegressor())])
INFO - classes.py - 703 - Training Model: StackingRegressor(estimators=[('rf', RandomForestRegressor()),
                              ('gb', GradientBoostingRegressor())])
INFO - classes.py - 699 - Testing Model: MLPRegressor(max_iter=10000)
INFO - classes.py - 703 - Training Model: MLPRegressor(max_iter=10000)
INFO - classes.py - 736 - Each model has been tested. Results have been sorted from best -> worst.
INFO - classes.py - 739 - Top Model: extra_trees | R2 Score: 0.7548322150564044
